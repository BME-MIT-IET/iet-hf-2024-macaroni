package macaroni.test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import macaroni.model.character.Character;
import macaroni.model.character.Plumber;
import macaroni.model.character.Saboteur;
import macaroni.model.effects.BananaEffect;
import macaroni.model.effects.NoEffect;
import macaroni.model.effects.TechnokolEffect;
import macaroni.model.element.ActiveElement;
import macaroni.model.element.Cistern;
import macaroni.model.element.Element;
import macaroni.model.element.Pipe;
import macaroni.model.element.Pump;
import macaroni.model.misc.WaterCollector;
import macaroni.test.util.ReflectionUtil;
import macaroni.utils.ModelObjectFactory;

public class AutoGeneratedTests {

	@BeforeEach
	void setup() {
		ModelObjectFactory.reset();
	}

	@Test
	void RepairPipe() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//repair plumber pipe
		assertTrue(plumber.repair(pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, pipe, "pierced"), false);
	}

	@Test
	void UnabletoSetPumpoutput() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var plumber = new Plumber(null);
		var ground = new WaterCollector();
		ReflectionUtil.setPrivateField(Pump.class, pump1, "inputPipe", pipe);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", ground);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pump1);
		//set output plumber pump1 pipe
		assertFalse(plumber.setOutputPipe(pump1, pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pump.class, pump1, "inputPipe"), pipe);
		assertNull(ReflectionUtil.getPrivateField(Pump.class, pump1, "outputPipe"));
	}

	@Test
	void RepairPump() {
		var pump = new Pump();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(Pump.class, pump, "broken", true);
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pump);
		//repair plumber pump
		assertTrue(plumber.repair(pump));
		assertEquals(ReflectionUtil.getPrivateField(Pump.class, pump, "broken"), false);
	}

	@Test
	void AcquirePump() {
		var collector = new WaterCollector();
		var cistern = new Cistern(null);
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(Cistern.class, cistern, "collector", collector);
		ReflectionUtil.setPrivateField(Plumber.class, plumber, "heldPumps", new ArrayList<>());
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", cistern);
		//getpump plumber cistern pump
		ModelObjectFactory.setCisternCreatePumpName("pump");
		assertTrue(plumber.pickUpPump(cistern));
		Pump pump = (Pump) ModelObjectFactory.getObject("pump");
		assertEquals(ReflectionUtil.getPrivateField(Plumber.class, plumber, "heldPumps"), ReflectionUtil.asList(pump));
	}

	@Test
	void PlacePump() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pump3 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Plumber.class, plumber, "heldPumps", ReflectionUtil.asList(pump3));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//placepump plumber pipe newPipe
		ModelObjectFactory.setPipeCreatePipeName("newPipe");
		assertTrue(plumber.placePump(pipe));
		Pipe newPipe = (Pipe) ModelObjectFactory.getObject("newPipe");
		assertEquals(ReflectionUtil.getPrivateField(Character.class, plumber, "location"), pump3);
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, pipe, "endpoints"), ReflectionUtil.asList(pump2, pump3));
		assertEquals(ReflectionUtil.getPrivateField(Element.class, pipe, "neighbours"), ReflectionUtil.asList(pump2, pump3));
		assertEquals(ReflectionUtil.getPrivateField(ActiveElement.class, pump3, "connectedPipes"), ReflectionUtil.asList(pipe, newPipe));
		assertEquals(ReflectionUtil.getPrivateField(Element.class, pump3, "neighbours"), ReflectionUtil.asList(pipe, newPipe));
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, newPipe, "endpoints"), ReflectionUtil.asList(pump1, pump3));
		assertEquals(ReflectionUtil.getPrivateField(Element.class, newPipe, "neighbours"), ReflectionUtil.asList(pump1, pump3));
	}

	@Test
	void UnabletoPlacePump() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Plumber.class, plumber, "heldPumps", new ArrayList<>());
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//placepump plumber pipe newPipe
		assertFalse(plumber.placePump(pipe));
		assertEquals(ReflectionUtil.getPrivateField(Character.class, plumber, "location"), pipe);
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, pipe, "endpoints"), ReflectionUtil.asList(pump1, pump2));
		assertEquals(ReflectionUtil.getPrivateField(Element.class, pipe, "neighbours"), ReflectionUtil.asList(pump1, pump2));
		assertNull(ModelObjectFactory.getObject("newPipe"));
	}

	@Test
	void PiercePipe() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", false);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierceCooldown", 0);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//pierce plumber pipe
		assertTrue(plumber.pierce(pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, pipe, "pierced"), true);
	}

	@Test
	void PierceunpierceablePipe() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", false);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierceCooldown", 10);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//pierce plumber pipe
		assertFalse(plumber.pierce(pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pipe.class, pipe, "pierced"), false);
	}

	@Test
	void TechnokolPipe() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var collector = new WaterCollector();
		var plumber = new Plumber(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "occupied", true);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierced", false);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "pierceCooldown", 0);
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", collector);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pipe);
		//technokol plumber pipe
		assertTrue(plumber.applyTechnokol(pipe));
		assertTrue(ReflectionUtil.getPrivateField(Pipe.class, pipe, "effect") instanceof TechnokolEffect);
	}

	@Test
	void BananaPipe() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var saboteur = new Saboteur(null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "effect", new NoEffect(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, saboteur, "location", pipe);
		//banana saboteur pipe
		assertTrue(saboteur.dropBanana(pipe));
		assertTrue(ReflectionUtil.getPrivateField(Pipe.class, pipe, "effect") instanceof BananaEffect);
	}

	@Test
	void SetPumpinput() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var plumber = new Plumber(null);
		var ground = new WaterCollector();
		ReflectionUtil.setPrivateField(Pump.class, pump1, "inputPipe", null);
		ReflectionUtil.setPrivateField(Pump.class, pump1, "outputPipe", null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", ground);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pump1);
		//set input plumber pump1 pipe
		assertTrue(plumber.setInputPipe(pump1, pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pump.class, pump1, "inputPipe"), pipe);
	}

	@Test
	void SetPumpoutput() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var plumber = new Plumber(null);
		var ground = new WaterCollector();
		ReflectionUtil.setPrivateField(Pump.class, pump1, "inputPipe", null);
		ReflectionUtil.setPrivateField(Pump.class, pump1, "outputPipe", null);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", ground);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pump1);
		//set output plumber pump1 pipe
		assertTrue(plumber.setOutputPipe(pump1, pipe));
		assertEquals(ReflectionUtil.getPrivateField(Pump.class, pump1, "outputPipe"), pipe);
	}

	@Test
	void UnabletoSetPumpinput() {
		var pump1 = new Pump();
		var pump2 = new Pump();
		var pipe = new Pipe(null);
		var plumber = new Plumber(null);
		var ground = new WaterCollector();
		ReflectionUtil.setPrivateField(Pump.class, pump1, "outputPipe", pipe);
		ReflectionUtil.setPrivateField(ActiveElement.class, pump1, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump1, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(ActiveElement.class, pump2, "connectedPipes", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Element.class, pump2, "neighbours", ReflectionUtil.asList(pipe));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "endpoints", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Pipe.class, pipe, "ground", ground);
		ReflectionUtil.setPrivateField(Element.class, pipe, "neighbours", ReflectionUtil.asList(pump1, pump2));
		ReflectionUtil.setPrivateField(Character.class, plumber, "location", pump1);
		//set input plumber pump1 pipe
		assertFalse(plumber.setInputPipe(pump1, pipe));
		assertNull(ReflectionUtil.getPrivateField(Pump.class, pump1, "inputPipe"));
		assertEquals(ReflectionUtil.getPrivateField(Pump.class, pump1, "outputPipe"), pipe);
	}

}
